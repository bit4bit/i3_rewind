#!/usr/bin/env ruby
# frozen_string_literal: true
require 'json'
require 'fileutils'
require 'optparse'
require 'etc'
require 'fcntl'

SESSION_PATH = "#{ENV['HOME']}/.config/i3/i3_rewind.json".freeze
LOCK_FILE = "/tmp/i3_rewind_#{Etc.getlogin}.lock".freeze

def debug(message)
  puts message if ENV['DEBUG']
end

def single_instance_lock
  lock_fh = File.open(LOCK_FILE, File::RDWR | File::CREAT, 0o644)
  begin
    unless lock_fh.flock(File::LOCK_NB | File::LOCK_EX)
      puts "Another instance of this script is already running for user #{Etc.getlogin}."
      exit 1
    end
  rescue Errno::EWOULDBLOCK
    puts "Another instance of this script is already running for user #{Etc.getlogin}."
    exit 1
  end

  # Ensure the lock file handle does not get garbage collected and closed
  at_exit do
    lock_fh.flock(File::LOCK_UN)
    lock_fh.close
    File.delete(LOCK_FILE) if File.exist?(LOCK_FILE)
  end
end

def load_session(session_path)
  JSON.parse(File.read(session_path))
end

def dump_session(session, session_path)
  File.write(session_path, session.to_json)
end

def only_one_output_connected?(session)
  session['connected_outputs'].count == 1
end

def disconnect_non_connected_outputs(session)
  session['outputs'].each do |_, output|
    next if output['connected']

    cmd = %(xrandr --output #{output['output']} --off)
    error = `#{cmd} 2>&1 >/dev/null`
    puts error unless error.strip.empty?
  end
end

def all_outputs_connected?(session)
  session['outputs'].all? { |_, output| output['connected'] }
end

def restore_session(session, current_session)
  restore_outputs(session['outputs'], current_session['connected_outputs'])
  restore_i3(session['i3'])
end

def current_i3
  # Get i3 tree
  tree_json = `i3-msg -t get_tree`
  tree = JSON.parse(tree_json)

  windows = []

  # Recursive traversal
  traverse = lambda { |node, windows, ctx = {}|
    ctx = ctx.dup

    if node['type'] == 'workspace'
      ctx[:workspace] = node['name']
      ctx[:output] = node['output']
    end

    if node['window'] # unique i3 window ID
      windows << {
        'id' => node['window'],
        'class' => node['window_properties']['class'],
        'title' => node['name'],
        'workspace' => ctx[:workspace],
        'output' => ctx[:output]
      }
    end

    (node['nodes'] || []).each { |child| traverse.call(child, windows, ctx) }
    (node['floating_nodes'] || []).each { |child| traverse.call(child, windows, ctx) }
  }
  traverse.call(tree, windows)
  i3_binding_state_json = `i3-msg -t get_binding_state`
  i3_binding_state = JSON.parse(i3_binding_state_json)

 {'windows' => windows.reject { |i| i['output'].nil? }, 'mode' => i3_binding_state['name']}
end

def restore_i3(i3state)
  i3state['windows'].each do |window|
    id = window['id']
    workspace = window['workspace']
    output = window['output']
    cmd = %(i3-msg "[id=#{id}] move container to workspace #{workspace}; [id=#{id}] move container to output #{output}" 2>&1 >/dev/null)
    error = `#{cmd}`
    puts error unless error.strip.empty?
  end

end

def connected_outputs
  outputs = {}
  xrandr_output = `xrandr --query`
  xrandr_output.lines.each do |line|
    next unless line =~ /^(\S+) (connected|disconnected)/

    name = Regexp.last_match(1)
    connected = !Regexp.last_match(2).to_s.include?('disconnected')
    outputs[name] = {
      'output' => name,
      'connected' => connected
    }
  end

  outputs.select{|_, output| output['connected']}
end

def current_outputs
  outputs = {}
  xrandr_output = `xrandr --query`

  xrandr_output.lines.each do |line|
    next unless line =~ /^(\S+) (connected|disconnected)\s*(primary\s*)?(\d+)x(\d+)\+(\d+)\+(\d+)/

    name = Regexp.last_match(1)
    connected = !Regexp.last_match(2).to_s.include?('disconnected')
    is_primary = Regexp.last_match(3).to_s.include?('primary')
    width = Regexp.last_match(4).to_i
    height = Regexp.last_match(5).to_i
    x = Regexp.last_match(6).to_i
    y = Regexp.last_match(7).to_i
    outputs[name] = {
      'output' => name,
      'x' => x,
      'y' => y,
      'width' => width,
      'height' => height,
      'is_primary' => is_primary,
      'connected' => connected
    }
  end
  outputs
end

def restore_outputs(outputs, current_outputs)

  outputs.each do |name, output|
    next if current_outputs[name]['connected'] == false

    cmd = %(xrandr --output #{output['output']} --mode #{output['width']}x#{output['height']} --pos #{output['x']}x#{output['y']}#{if output['is_primary']
                                                                                                                                     ' --primary'
                                                                                                                                   end} --auto)
    error = `#{cmd} 2>&1 >/dev/null`
    puts error unless error.strip.empty?
  end
end

def current_session
  { 'i3' => current_i3, 'outputs' => current_outputs, 'connected_outputs' => connected_outputs}
end

def shell_inform_transition(transition, script)
  return if script.nil?

  command_path = script || ENV['I3_REWIND_TRANSITION_SCRIPT']

  unless File.executable?(command_path)
    puts "Transition command at #{command_path} is not executable."
    return
  end

  env = { 'I3_REWIND_TRANSITION' => transition, 'DISPLAY' => ENV['DISPLAY'] }
  debug("Executing transition #{transition} script #{command_path}")
  system(env, command_path)
end

# Main

FileUtils.mkdir_p(File.dirname(SESSION_PATH))
unless system('which xrandr > /dev/null 2>&1')
  puts 'Error: xrandr command not found. Please install xrandr.'
  exit 1
end

unless system('which i3-msg > /dev/null 2>&1')
  puts 'Error: i3-msg command not found. Please install i3-msg.'
  exit 1
end

action = nil
transition_script = nil
OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options]"
  opts.on('-s', '--save', 'Save the current session') do
    action = :save
  end

  opts.on('-r', '--restore', 'Restore the saved session') do
    action = :restore
  end

  opts.on('-w', '--watch', 'Watch for monitor changes and save/restore session') do
    action = :watch
  end
  opts.on('-t', '--transition PATH', 'Path to script to execute between transitions') do |path|
    transition_script = path
  end

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end
end.parse!

single_instance_lock

case action
when :save
  dump_session(current_session, SESSION_PATH)
  puts "Session saved to #{SESSION_PATH}"
  exit
when :restore
  if File.exist?(SESSION_PATH)
    if load_session(SESSION_PATH)['outputs'].count != current_session()['connected_outputs'].count
      raise "Can't restore outputs"
    end

    restore_session(load_session(SESSION_PATH), current_session)
    puts "Session restored from #{SESSION_PATH}"
  else
    puts "No saved session found at #{SESSION_PATH}"
  end
  exit
when :watch
  stage = :only_primary
  loop do
    session = current_session

    debug("stage: #{stage}")
    debug("stage_session: #{session.inspect}")
    case stage
    when :only_primary
      stage = if only_one_output_connected?(session)
                :only_primary
              else
                :restore_outputs
              end
    when :restore_outputs
      if File.exist?(SESSION_PATH)
        restore_session(load_session(SESSION_PATH), session)
      end

      shell_inform_transition('to_multi_monitor', transition_script)
      stage = :monitor_outputs
    when :wait_outputs
      stage = if all_outputs_connected?(session)
                :restore_outputs
              else
                :wait_outputs
              end
    when :monitor_outputs
      dump_session(session, SESSION_PATH)
      if only_one_output_connected?(session)
        disconnect_non_connected_outputs(session)
        shell_inform_transition('to_primary_monitor', transition_script)
        stage = :only_primary
      elsif all_outputs_connected?(session)
        stage = :monitor_outputs
      else
        stage = :wait_outputs
      end
    end

    sleep 5
  end
when nil
  puts 'No action specified'
end
